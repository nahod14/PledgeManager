
@page "/payments"
@inject AppDbContext Db
@inject PledgeManager.Infrastructure.IReceiptService Receipts

<h1>Payments</h1>

<table>
  <thead><tr><th>Pledge</th><th>Amount</th><th>Paid On</th><th>Method</th></tr></thead>
  <tbody>
    @foreach (var p in items)
    {
        <tr>
          <td>@p.PledgeId</td>
          <td>@p.Amount</td>
          <td>@p.PaidOn</td>
          <td>@p.Method</td>
        </tr>
    }
  </tbody>
</table>

<h3>Record Payment</h3>
<EditForm Model="@vm" OnValidSubmit="Create">
  <label>Pledge</label>
  <select @bind="vm.PledgeId">
    <option value="">-- select pledge --</option>
    @foreach (var p in pledges)
    {
        <option value="@p.Id">@p.Donor?.Name - @p.Amount (@p.Status)</option>
    }
  </select>
  <label>Amount</label>
  <InputNumber @bind-Value="vm.Amount" />
  <label>Method</label>
  <InputText @bind-Value="vm.Method" />
  <button type="submit">Save</button>
</EditForm>

@code {
    private List<Payment> items = new();
    private List<Pledge> pledges = new();
    private NewPayment vm = new();

    protected override async Task OnInitializedAsync()
    {
        pledges = await Db.Pledges.Include(x=>x.Donor).ToListAsync();
        await Load();
    }

    private async Task Load()
    {
        items = await Db.Payments.OrderByDescending(x=>x.PaidOn).ToListAsync();
    }

    private async Task Create()
    {
        if (vm.PledgeId == Guid.Empty || vm.Amount <= 0) return;
        var pay = new Payment { PledgeId = vm.PledgeId, Amount = vm.Amount, Method = vm.Method };
        Db.Payments.Add(pay);
        await Db.SaveChangesAsync();
        // Generate receipt PDF and store as FileBlob
        await Receipts.GenerateReceiptPdfAsync(pay.Id);
        vm = new();
        await Load();
    }

    private sealed class NewPayment
    {
        public Guid PledgeId { get; set; }
        public decimal Amount { get; set; }
        public string Method { get; set; } = "Cash";
    }
}
